iOS Engineer Code Challenge ‚Äì Architecture Focused

# Overview

Build a modular Shopping List feature in Swift designed to integrate into a larger super-app. The module should follow offline-first principles, maintain a clean architecture, and support local persistence, background sync, and filtering/searching functionalities.

‚∏ª

‚ú® Feature Requirements
   ### Users must be able to:
    ‚Ä¢    Add, edit, or delete a shopping item with:
    ‚Ä¢    name (required)
    ‚Ä¢    quantity (required)
    ‚Ä¢    note (optional)
    ‚Ä¢    Mark an item as ‚Äúbought‚Äù
    ‚Ä¢    Bought items are hidden by default and can be toggled with a filter
    ‚Ä¢    The list must support:
    ‚Ä¢    Filtering (bought / not bought)
    ‚Ä¢    Searching by name or note
    ‚Ä¢    Sorting by creation/modification date (ascending or descending)

‚∏ª

üíæ Data Requirements
    ‚Ä¢    Local persistence using one of:
    ‚Ä¢    SwiftData, Core Data, or Realm
    ‚Ä¢    Remote sync to a JSON-based REST API (mock or stub is acceptable)
    ‚Ä¢    Offline-first behavior:
    ‚Ä¢    The feature must work fully offline
    ‚Ä¢    Background sync must reconcile changes using a last-write-wins strategy (based on timestamps)

‚∏ª

üèó Architecture Requirements
    ‚Ä¢    Use a layered architecture:
    ‚Ä¢    Clean Architecture, MVVM, or MVI
    ‚Ä¢    Implement a Repository Layer
    ‚Ä¢    Define clear module boundaries

‚∏ª

üì¶ Technical Requirements

Modular Design
    ‚Ä¢    Package the feature as either:
    ‚Ä¢    A Swift Package
    ‚Ä¢    A standalone Framework
    ‚Ä¢    Expose a single clean interface, such as:
    ‚Ä¢    ShoppingListViewController (UIKit)
    ‚Ä¢    ShoppingListView (SwiftUI)

Dependency Injection
    ‚Ä¢    Use one of the following:
    ‚Ä¢    Resolver
    ‚Ä¢    Factory Pattern
    ‚Ä¢    Manual injection
    ‚Ä¢    Be prepared to explain your DI strategy

Testing
    ‚Ä¢    Write unit tests for ViewModels/business logic
    ‚Ä¢    Include at least one UI test using XCTest or Swift Testing (#Test macros)

Git Requirements
    ‚Ä¢    Use at least 5 incremental commits
    ‚Ä¢    Each commit must have a descriptive message representing meaningful development steps

‚∏ª

üìÑ Project Artifacts
    ‚Ä¢    README.md
    ‚Ä¢    Build and run instructions
    ‚Ä¢    List of AI tools and/or prompts used (if any)
    ‚Ä¢    DESIGN_DOC.md (max 600 words)
    ‚Ä¢    Summarize architecture decisions
    ‚Ä¢    Highlight two rejected alternatives with reasoning

‚∏ª

üèÖ Extra Credit

You can earn bonus points by implementing:
    ‚Ä¢    Background sync using BackgroundTasks or Combine + URLSession
    ‚Ä¢    Include retry logic with exponential back-off
    ‚Ä¢    Use Swift Testing macros (#Test, #expect) instead of XCTest
    ‚Ä¢    Provide well-documented, clean, and modular code
    ‚Ä¢    Ensure the code is memory-efficient and easy to understand
